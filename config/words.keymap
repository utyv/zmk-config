
/ {
    macros {
        macro_IF: macro_IF {
            label = "macro_IF";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_wait_time 1>
                , <&macro_tap &kp LS(T) &kp C &kp K &kp B>
                ;
        };
        macro_THEN: macro_THEN {
            label = "macro_THEN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_wait_time 1>
                , <&macro_tap &kp LS(N) &kp J &kp U &kp L &kp F>
                ;
        };
    };
};
/ {
    behaviors {
        st_ifthen: st_ifthen {
            compatible = "zmk,behavior-mod-morph";
            label = "ST_IFTHEN";
            #binding-cells = <0>;
            bindings = <&macro_IF>, <&macro_THEN>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};
/ {
    macros {
        macro_END: macro_END {
            label = "macro_END";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_wait_time 1>
                , <&macro_tap &kp LS(R) &kp J &kp Y &kp T &kp W>
                ;
        };
        macro_ELSE: macro_ELSE {
            label = "macro_ELSE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_wait_time 1>
                , <&macro_tap &kp LS(B) &kp Y &kp F &kp X &kp T>
                ;
        };
    };
};
/ {
    behaviors {
        st_endelse: st_endelse {
            compatible = "zmk,behavior-mod-morph";
            label = "ST_ENDELSE";
            #binding-cells = <0>;
            bindings = <&macro_END>, <&macro_ELSE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};
/ {
    macros {
        macro_FOR: macro_FOR {
            label = "macro_FOR";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_wait_time 1>
                , <&macro_tap &kp LS(L) &kp K &kp Z>
                ;
        };
        macro_WHILE: macro_WHILE {
            label = "macro_WHILE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_wait_time 1>
                , <&macro_tap &kp LS(G) &kp J &kp R &kp F>
                ;
        };
    };
};
/ {
    behaviors {
        st_forwhile: st_forwhile {
            compatible = "zmk,behavior-mod-morph";
            label = "ST_FORWHILE";
            #binding-cells = <0>;
            bindings = <&macro_FOR>, <&macro_WHILE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};
/ {
    macros {
        macro_LOOP: macro_LOOP {
            label = "macro_LOOP";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_wait_time 1>
                , <&macro_tap &kp LS(W) &kp B &kp R &kp K>
                ;
        };
        macro_EACH: macro_EACH {
            label = "macro_EACH";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_wait_time 1>
                , <&macro_tap &kp LS(R) &kp F &kp SEMI &kp L &kp J &kp U &kp J>
                ;
        };
    };
};
/ {
    behaviors {
        st_loopeach: st_loopeach {
            compatible = "zmk,behavior-mod-morph";
            label = "ST_LOOPEACH";
            #binding-cells = <0>;
            bindings = <&macro_LOOP>, <&macro_EACH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};
/ {
    macros {
        macro_ADD: macro_ADD {
            label = "macro_ADD";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_wait_time 1>
                , <&macro_tap &kp LS(L) &kp J &kp COMMA &kp F &kp D &kp B &kp N &kp M>
                ;
        };
        macro_DEL: macro_DEL {
            label = "macro_DEL";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_wait_time 1>
                , <&macro_tap &kp LS(E) &kp L &kp F &kp K &kp B &kp N &kp M>
                ;
        };
    };
};
/ {
    behaviors {
        st_adddel: st_adddel {
            compatible = "zmk,behavior-mod-morph";
            label = "ST_ADDDEL";
            #binding-cells = <0>;
            bindings = <&macro_ADD>, <&macro_DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};
/ {
    macros {
        macro_GET: macro_GET {
            label = "macro_GET";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_wait_time 1>
                , <&macro_tap &kp LS(G) &kp J &kp K &kp E &kp X &kp B &kp N &kp M>
                ;
        };
        macro_SET: macro_SET {
            label = "macro_SET";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_wait_time 1>
                , <&macro_tap &kp LS(E) &kp C &kp N &kp F &kp Y &kp J &kp D &kp B &kp N &kp M>
                ;
        };
    };
};
/ {
    behaviors {
        st_getset: st_getset {
            compatible = "zmk,behavior-mod-morph";
            label = "ST_GETSET";
            #binding-cells = <0>;
            bindings = <&macro_GET>, <&macro_SET>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};
