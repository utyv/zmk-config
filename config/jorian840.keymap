/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };
&mt { quick_tap_ms = <200>; };


/ {
    macros {
        macro_0: macro_0 {
            label = "macro_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT &kp LSHFT>
                , <&macro_release &kp LALT &kp LSHFT>
                , <&macro_tap &kp LBKT>
                , <&macro_press &kp LALT &kp LSHFT>
                , <&macro_release &kp LALT &kp LSHFT>
                ;
        };
    };
};

/ {
    macros {
        macro_1: macro_1 {
            label = "macro_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <1>;
            bindings
                = <&macro_press &kp LALT &kp LSHFT>
                , <&macro_release &kp LALT &kp LSHFT>
                , <&macro_tap &kp RBKT>
                , <&macro_press &kp LALT &kp LSHFT>
                , <&macro_release &kp LALT &kp LSHFT>
                ;
        };
    };
};



/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |   ~  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  [   |  ]  |
//        | LALT |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
//        | CTRL |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  _  | CTRL |
//                           | SPC | LSH | LWR |   | RSE | RSH  | LANG |
                        bindings = <
   &kp ESC  &kp GRAVE &kp Q &kp W &kp E &kp R &kp T &kp Y         &kp U  &kp I     &kp O   &kp P         &kp LBKT      &kp RBKT
            &kp LALT  &kp A &kp S &kp D &kp F &kp G &kp H         &kp J  &kp K     &kp L   &kp SEMI      &kp SQT
            &kp LCTRL &kp Z &kp X &kp C &kp V &kp B &kp N         &kp M  &kp COMMA &kp DOT &kp LS(MINUS) &kp LCTRL
                             &kp SPACE &kp LSHFT  &mo LWR         &mo RSE &kp RSHFT &kp LA(LSHFT)
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |     |  F1 |  F2 |  F3 |  F4 |  F5 |     |   |utyv |     |  F9 |     |     | F12 |Ctl- |
//       |  // | Hom | PD  |  PU | End | Tab |   | ENT | LEFT| UP  |DOWN | RGHT| ALT |
//       |Ctrl |CL Hm| CL+ | CL- |CLEnd| Del |   |Cl EN|Cl LF|Cl { |Cl } |Cl RT|Ctrl |
//                        | MENU |     |     |   |PrnSn|BkSps|ClPau|
                        bindings = <
   &none &kp F1           &kp F2       &kp F3          &kp F4           &kp F5      &none        &none         &none        &kp F9       &none        &none         &kp F11   &kp LC(MINUS)
         &kp LC(KP_SLASH) &kp HOME     &kp PG_DN       &kp PG_UP        &kp END     &kp TAB      &kp ENTER     &kp LEFT     &kp UP       &kp DOWN     &kp RIGHT     &kp RALT
         &kp LCTRL        &kp LC(HOME) &kp LC(KP_PLUS) &kp LC(KP_MINUS) &kp LC(END) &kp DEL      &kp LC(ENTER) &kp LC(LEFT) &kp LC(LBKT) &kp LC(RBKT) &kp LC(RIGHT) &kp RCTRL
                                                       &kp K_MENU       &trans      &none        &kp PSCRN     &kp BSPC     &kp LC(PAUSE_BREAK)
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |     |  $  |  [  |  ]  |  â„–  |  ;  |  %  |   |  :  |  ~  |  *  |  (  |  )  |  {  |  }  |
//       |  /  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |  '  |
//       |  \  |  #  |  @  |  |  |  "  |  -  |   |  !  |  ?  |  <  |  >  |  &  |  ^  |
//                       |   +   |  =  |  .  |   |     |     |   ,   |
                        bindings = <
   &none &none               &macro_0 &macro_1  &kp LS(N3) &kp LS(N4) &kp LS(N5)    &kp LS(N6) &kp LS(GRAVE) &kp LS(N8) &kp LS(N9) &kp LS(N0) &none &none
         &kp LS(NON_US_BSLH) &kp N1   &kp N2    &kp N3     &kp N4     &kp N5        &kp N6     &kp N7        &kp N8     &kp N9     &kp N0     &none 
         &kp NON_US_BSLH     &none    &none     &none      &kp LS(N2) &kp MINUS     &kp LS(N1) &kp LS(N7)    &none      &none      &none      &none
                                             &kp LS(EQUAL) &kp EQUAL  &kp SLASH     &none      &trans        &kp LS(SLASH)
                        >;
                };
                adjust_layer {
// -----------------------------------------------------------------------------------------
// | RST | BLDR |     |     |     |     |     |   |     |     |     |     |     | BLDR | RST |
//       | BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |   | BT4 | BT3 | BT2 | BT1 | BT0 | BTCLR|
//       |      |     |     |     |     |     |   |     |     |     |     |     |      |
//                          |     |     |     |   |     |     |     |
                        bindings = <
   &reset &bootloader  &none        &none        &none        &none        &none              &none        &none        &none        &none        &none         &bootloader &reset
          &bt BT_CLR   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4       &bt BT_SEL 4 &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0  &bt BT_CLR
          &none        &none        &none        &none        &none        &none              &none        &none        &none        &none        &none         &none
                                                                    &trans &none &trans   &trans &none &trans
                        >;
                };
        };
};
