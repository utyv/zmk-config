/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3
#define MY_COMBO_TIME 100

#include "macro_symbols.keymap"
#include "macro_lang.keymap"
#include "words.keymap"


/ {
    behaviors {
        eng_dot_comma: eng_dot_comma {
            compatible = "zmk,behavior-mod-morph";
            label = "ENG_DOT_COMMA";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COMMA>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        eng_dqt: eng_dqt {
            compatible = "zmk,behavior-mod-morph";
            label = "ENG_DQT";
            #binding-cells = <0>;
            bindings = <&kp N2>, <&kp LS(SQT)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ru_hash: ru_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_HASH";
            #binding-cells = <0>;
            bindings = <&kp N3>, <&macro_HASH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ru_semi_colon: ru_semi_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_SEMI_COLON";
            #binding-cells = <0>;
            bindings = <&kp LS(N4)>, <&kp LS(N6)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ru_slash: ru_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_SLASH";
            #binding-cells = <0>;
            bindings = <&kp LS(BSLH)>, <&kp BSLH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        eng_slash: eng_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "ENG_SLASH";
            #binding-cells = <0>;
            bindings = <&kp SLASH>, <&kp BSLH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ru_dollar: ru_dollar {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_DOLLAR";
            #binding-cells = <0>;
            bindings = <&kp N4>, <&macro_DOLLAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ru_caret: ru_caret {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_CARET";
            #binding-cells = <0>;
            bindings = <&kp N6>, <&macro_CARET>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        eng_qmark: eng_qmark {
            compatible = "zmk,behavior-mod-morph";
            label = "ENG_QMARK";
            #binding-cells = <0>;
            bindings = <&kp N7>, <&kp LS(SLASH)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ru_lt: ru_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_LT";
            #binding-cells = <0>;
            bindings = <&macro_LT>, <&macro_LT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ru_gt: ru_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_GT";
            #binding-cells = <0>;
            bindings = <&macro_GT>, <&macro_GT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ru_lbkt: ru_lbkt {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_LBKT";
            #binding-cells = <0>;
            bindings = <&macro_LBKT>, <&macro_LBRC>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ru_rbkt: ru_rbkt {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_RBKT";
            #binding-cells = <0>;
            bindings = <&macro_RBKT>, <&macro_RBRC>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        eng_lbkt: eng_lbkt {
            compatible = "zmk,behavior-mod-morph";
            label = "ENG_LBKT";
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp LS(LBKT)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        eng_rbkt: eng_rbkt {
            compatible = "zmk,behavior-mod-morph";
            label = "ENG_RBKT";
            #binding-cells = <0>;
            bindings = <&kp RBKT>, <&kp LS(RBKT)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ru_amps: ru_amps {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_AMPS";
            #binding-cells = <0>;
            bindings = <&macro_AMPS>, <&macro_PIPE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        eng_amps: eng_amps {
            compatible = "zmk,behavior-mod-morph";
            label = "ENG_AMPS";
            #binding-cells = <0>;
            bindings = <&kp LS(N7)>, <&kp LS(NUBS)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ru_at: ru_at {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_AT";
            #binding-cells = <0>;
            bindings = <&macro_AT>, <&macro_SQT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        eng_at: eng_at {
            compatible = "zmk,behavior-mod-morph";
            label = "ENG_AT";
            #binding-cells = <0>;
            bindings = <&kp LS(N2)>, <&kp SQT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ru_number: ru_number {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_NUMBER";
            #binding-cells = <0>;
            bindings = <&macro_NUMBER>, <&macro_PARAGRAF>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ru_grave: ru_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_GRAVE";
            #binding-cells = <0>;
            bindings = <&macro_GRAVE>, <&macro_TILDE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ctl_prnbrk: ctl_prnbrk {
            compatible = "zmk,behavior-mod-morph";
            label = "CTL_PRNBRK";
            #binding-cells = <0>;
            bindings = <&kp PSCRN>, <&kp LC(PAUSE_BREAK)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ru_undo: ru_undo {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_UNDO";
            #binding-cells = <0>;
            bindings = <&ru_slash>, <&kp Z>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
       };
       eng_undo: eng_undo {
            compatible = "zmk,behavior-mod-morph";
            label = "ENG_UNDO";
            #binding-cells = <0>;
            bindings = <&eng_slash>, <&kp Z>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
       };
       ctl_cut: ctl_cut {
            compatible = "zmk,behavior-mod-morph";
            label = "CTL_CUT";
            #binding-cells = <0>;
            bindings = <&kp N1>, <&kp X>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
       };
       ru_copy: ru_copy {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_COPY";
            #binding-cells = <0>;
            bindings = <&kp N2>, <&kp C>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
       };
       eng_copy: eng_copy {
            compatible = "zmk,behavior-mod-morph";
            label = "ENG_COPY";
            #binding-cells = <0>;
            bindings = <&eng_dqt>, <&kp C>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
       };
       ru_paste: ru_paste {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_PASTE";
            #binding-cells = <0>;
            bindings = <&ru_hash>, <&kp V>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
       };
       eng_paste: eng_paste {
            compatible = "zmk,behavior-mod-morph";
            label = "ENG_PASTE";
            #binding-cells = <0>;
            bindings = <&kp N3>, <&kp V>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
       };
       ru_all: ru_all {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_ALL";
            #binding-cells = <0>;
            bindings = <&kp SLASH>, <&kp A>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
       };
       eng_all: eng_all {
            compatible = "zmk,behavior-mod-morph";
            label = "ENG_ALL";
            #binding-cells = <0>;
            bindings = <&eng_dot_comma>, <&kp A>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
       };
       ru_save: ru_save {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_SAVE";
            #binding-cells = <0>;
            bindings = <&ru_dollar>, <&kp S>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
       };
       eng_save: eng_save {
            compatible = "zmk,behavior-mod-morph";
            label = "ENG_SAVE";
            #binding-cells = <0>;
            bindings = <&kp N4>, <&kp S>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
       };
       ru_find: ru_find {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_FIND";
            #binding-cells = <0>;
            bindings = <&ru_caret>, <&kp F>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
       };
       eng_find: eng_find {
            compatible = "zmk,behavior-mod-morph";
            label = "ENG_FIND";
            #binding-cells = <0>;
            bindings = <&kp N6>, <&kp F>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
       };
       st_ifthen: st_ifthen {
            compatible = "zmk,behavior-mod-morph";
            label = "ST_IFTHEN";
            #binding-cells = <0>;
            bindings = <&macro_IF>, <&macro_THEN>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        st_elseend: st_elseend {
            compatible = "zmk,behavior-mod-morph";
            label = "ST_ELSEEND";
            #binding-cells = <0>;
            bindings = <&macro_END>, <&macro_ELSE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        st_forwhi: st_forwhi {
            compatible = "zmk,behavior-mod-morph";
            label = "ST_FORWHI";
            #binding-cells = <0>;
            bindings = <&macro_FOR>, <&macro_WHILE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        st_loopeach: st_loopeach {
            compatible = "zmk,behavior-mod-morph";
            label = "ST_LOOPEACH";
            #binding-cells = <0>;
            bindings = <&macro_LOOP>, <&macro_EACH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        st_procfunc: st_procfunc {
            compatible = "zmk,behavior-mod-morph";
            label = "ST_PROCFUNC";
            #binding-cells = <0>;
            bindings = <&macro_PROC>, <&macro_FUNC>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        st_addel: st_addel {
            compatible = "zmk,behavior-mod-morph";
            label = "ST_ADDEL";
            #binding-cells = <0>;
            bindings = <&macro_ADD>, <&macro_DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        st_getset: st_getset {
            compatible = "zmk,behavior-mod-morph";
            label = "ST_GETSET";
            #binding-cells = <0>;
            bindings = <&macro_GET>, <&macro_SET>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_RU_ENG {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <30 38>;
            bindings = <&macro_ENG>;
            layers = <DEF>;
        };
        combo_ENG_ENG {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <30 38>;
            bindings = <&none>;
            layers = <LWR>;
        };
        combo_ENG_RU {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <29 38>;
            bindings = <&macro_RU>;
            layers = <LWR>;
        };
        combo_RU_RU {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <29 38>;
            bindings = <&none>;
            layers = <DEF>;
        };
        combo_LANG {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <31 38>;
            bindings = <&macro_LANG>;
            layers = <DEF LWR>;
        };
        combo_A {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <17 18>;
            bindings = <&kp F>;
            layers = <DEF>;
        };
        combo_ENG_A {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <17 18>;
            bindings = <&kp A>;
            layers = <LWR>;
        };
        combo_E {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <16 18>;
            bindings = <&kp T>;
            layers = <DEF>;
        };
         combo_ENG_E {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <16 18>;
            bindings = <&kp E>;
            layers = <LWR>;
        };
        combo_I {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <15 18>;
            bindings = <&kp B>;
            layers = <DEF>;
        };
        combo_ENG_I {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <15 18>;
            bindings = <&kp I>;
            layers = <LWR>;
        };
        combo_O {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <16 17>;
            bindings = <&kp J>;
            layers = <DEF>;
        };
        combo_ENG_O {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <16 17>;
            bindings = <&kp O>;
            layers = <LWR>;
        };
        combo_Y {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <15 17>;
            bindings = <&kp S>;
            layers = <DEF>;
        };
        combo_ENG_Y {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <15 17>;
            bindings = <&kp Y>;
            layers = <LWR>;
        };
        combo_U {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <15 16>;
            bindings = <&kp E>;
            layers = <DEF>;
        };
        combo_ENG_U {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <15 16>;
            bindings = <&kp U>;
            layers = <LWR>;
        };
        combo_EE {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <17 19>;
            bindings = <&kp SQT>;
            layers = <DEF>;
        };
        combo_ENG_EE {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <17 19>;
            bindings = <&kp E>;
            layers = <LWR>;
        };
        combo_YU {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <16 19>;
            bindings = <&kp DOT>;
            layers = <DEF>;
        };
        combo_ENG_YU {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <16 19>;
            bindings = <&kp U>;
            layers = <LWR>;
        };
        combo_YA {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <15 19>;
            bindings = <&kp Z>;
            layers = <DEF>;
        };
        combo_ENG_YA {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <15 19>;
            bindings = <&kp Q>;
            layers = <LWR>;
        };
        combo_YO {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <16 17 18>;
            bindings = <&kp GRAVE>;
            layers = <DEF>;
        };
        combo_ENG_YO {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <16 17 18>;
            bindings = <&none>;
            layers = <LWR>;
        };
        combo_P {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <4 5>;
            bindings = <&kp G>;
            layers = <DEF>;
        };
        combo_ENG_P {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <4 5>;
            bindings = <&kp P>;
            layers = <LWR>;
        };
        combo_B {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <29 30>;
            bindings = <&kp COMMA>;
            layers = <DEF>;
        };
        combo_ENG_B {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <29 30>;
            bindings = <&kp B>;
            layers = <LWR>;
        };
        combo_F {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <3 5>;
            bindings = <&kp A>;
            layers = <DEF>;
        };
        combo_ENG_F {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <3 5>;
            bindings = <&kp F>;
            layers = <LWR>;
        };
        combo_V {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <28 30>;
            bindings = <&kp D>;
            layers = <DEF>;
        };
        combo_ENG_V {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <28 30>;
            bindings = <&kp V>;
            layers = <LWR>;
        };
        combo_K {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <2 5>;
            bindings = <&kp R>;
            layers = <DEF>;
        };
        combo_ENG_K {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <2 5>;
            bindings = <&kp K>;
            layers = <LWR>;
        };
        combo_G {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <27 30>;
            bindings = <&kp U>;
            layers = <DEF>;
        };
        combo_ENG_G {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <27 30>;
            bindings = <&kp G>;
            layers = <LWR>;
        };
        combo_T {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <3 4>;
            bindings = <&kp N>;
            layers = <DEF>;
        };
        combo_ENG_T {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <3 4>;
            bindings = <&kp T>;
            layers = <LWR>;
        };
        combo_D {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <28 29>;
            bindings = <&kp L>;
            layers = <DEF>;
        };
        combo_ENG_D {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <28 29>;
            bindings = <&kp D>;
            layers = <LWR>;
        };
        combo_SH {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <2 4>;
            bindings = <&kp I>;
            layers = <DEF>;
        };
        combo_ENG_SH {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <2 4>;
            bindings = <&kp W>;
            layers = <LWR>;
        };
        combo_ZH {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <27 29>;
            bindings = <&kp SEMI>;
            layers = <DEF>;
        };
        combo_ENG_ZH {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <27 29>;
            bindings = <&kp Z>;
            layers = <LWR>;
        };
        combo_S {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <2 3>;
            bindings = <&kp C>;
            layers = <DEF>;
        };
        combo_ENG_S {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <2 3>;
            bindings = <&kp S>;
            layers = <LWR>;
        };
        combo_Z {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <27 28>;
            bindings = <&kp P>;
            layers = <DEF>;
        };
        combo_ENG_Z {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <27 28>;
            bindings = <&kp Z>;
            layers = <LWR>;
        };
        combo_YI {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <4 18>;
            bindings = <&kp Q>;
            layers = <DEF>;
        };
        combo_ENG_YI {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <4 18>;
            bindings = <&kp J>;
            layers = <LWR>;
        };
        combo_L {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <3 18>;
            bindings = <&kp K>;
            layers = <DEF>;
        };
        combo_ENG_L {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <3 18>;
            bindings = <&kp L>;
            layers = <LWR>;
        };
        combo_M {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <27 18>;
            bindings = <&kp V>;
            layers = <DEF>;
        };
        combo_ENG_M {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <27 18>;
            bindings = <&kp M>;
            layers = <LWR>;
        };
        combo_N {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <17 30>;
            bindings = <&kp Y>;
            layers = <DEF>;
        };
        combo_ENG_N {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <17 30>;
            bindings = <&kp N>;
            layers = <LWR>;
        };
        combo_R {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <28 17>;
            bindings = <&kp H>;
            layers = <DEF>;
        };
        combo_ENG_R {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <28 17>;
            bindings = <&kp R>;
            layers = <LWR>;
        };
        combo_H {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <27 17>;
            bindings = <&kp LBKT>;
            layers = <DEF>;
        };
        combo_ENG_H {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <27 17>;
            bindings = <&kp H>;
            layers = <LWR>;
        };
        combo_C {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <16 30>;
            bindings = <&kp W>;
            layers = <DEF>;
        };
        combo_ENG_C {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <16 30>;
            bindings = <&kp C>;
            layers = <LWR>;
        };
        combo_CH {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <16 29>;
            bindings = <&kp X>;
            layers = <DEF>;
        };
        combo_ENG_CH {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <16 29>;
            bindings = <&kp X>;
            layers = <LWR>;
        };
        combo_SCH {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <27 16>;
            bindings = <&kp O>;
            layers = <DEF>;
        };
        combo_ENG_SCH {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <27 16>;
            bindings = <&kp W>;
            layers = <LWR>;
        };
        combo_TVZ {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <15 5>;
            bindings = <&kp RBKT>;
            layers = <DEF>;
        };
        combo_ENG_TVZ {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <15 5>;
            bindings = <&kp SQT>;
            layers = <LWR>;
        };
        combo_MZ {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <15 4>;
            bindings = <&kp M>;
            layers = <DEF>;
        };
        combo_ENG_MZ {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <15 4>;
            bindings = <&kp SQT>;
            layers = <LWR>;
        };
        combo_TMZ {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <15 3>;
            bindings = <&macro_TMZ>;
            layers = <DEF>;
        };
        combo_LT {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <2 15>;
            bindings = <&ru_lt>;
            layers = <DEF>;
        };
        combo_ENG_LT {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <2 15>;
            bindings = <&kp LS(COMMA)>;
            layers = <LWR>;
        };
        combo_GT {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <3 16>;
            bindings = <&ru_gt>;
            layers = <DEF>;
        };
        combo_ENG_GT {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <3 16>;
            bindings = <&kp LS(DOT)>;
            layers = <LWR>;
        };
        combo_LBKT {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <5 18>;
            bindings = <&ru_lbkt>;
            layers = <DEF>;
        };
        combo_ENG_LBKT {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <5 18>;
            bindings = <&eng_lbkt>;
            layers = <LWR>;
        };
        combo_RBKT {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <6 19>;
            bindings = <&ru_rbkt>;
            layers = <DEF>;
        };
        combo_ENG_RBKT {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <6 19>;
            bindings = <&eng_rbkt>;
            layers = <LWR>;
        };
        combo_AMPS {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <4 17>;
            bindings = <&ru_amps>;
            layers = <DEF>;
        };
        combo_ENG_AMPS {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <4 17>;
            bindings = <&eng_amps>;
            layers = <LWR>;
        };
        combo_AT {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <17 29>;
            bindings = <&ru_at>;
            layers = <DEF>;
        };
        combo_ENG_AT {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <17 29>;
            bindings = <&eng_at>;
            layers = <LWR>;
        };
        combo_NUMBER {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <18 30>;
            bindings = <&ru_number>;
            layers = <DEF LWR>;
        };
        combo_GRAVE {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <16 28>;
            bindings = <&ru_grave>;
            layers = <DEF LWR>;
        };
        combo_LEFT {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <3 16>;
            bindings = <&kp LEFT>;
            layers = <ADJ>;
        };
        combo_RIGHT {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <5 18>;
            bindings = <&kp RIGHT>;
            layers = <ADJ>;
        };
        combo_CLEFT {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <16 28>;
            bindings = <&kp LC(LEFT)>;
            layers = <ADJ>;
        };
        combo_CRIGHT {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <18 30>;
            bindings = <&kp LC(RIGHT)>;
            layers = <ADJ>;
        };
        combo_UP {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <4 17>;
            bindings = <&kp UP>;
            layers = <ADJ>;
        };
        combo_DOWN {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <17 29>;
            bindings = <&kp DOWN>;
            layers = <ADJ>;
        };
        combo_CENTER {
            timeout-ms = <MY_COMBO_TIME>;
            key-positions = <6 19>;
            bindings = <&kp LC(ENTER)>;
            layers = <ADJ>;
        };
    };
};

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |         |  ; :          |   7      |   8   |    9    |   0     |               |     |     |     |     |     |      |     |
//        | SPC     |  .,           |  4 $     |   5   |   6 ^   |   +=    |               |     |     |     |     |     |      |
//        | LCTL    |  /\           |   1      |   2   |   3 #   |   -_    |               |     |     |     |     |     |      |
//                                                     |  RSE    |LSHFT    | ADJ   | |     |     |     |
                        bindings = <
   &kp ESC &none     &ru_semi_colon  &kp N7     &kp N8   &kp N9    &kp N0                    &none &none &none &none &none &none  &none
           &kp SPACE &ru_all         &ru_save   &kp N5   &ru_find  &kp EQUAL                 &none &none &none &none &none &none
           &kp LCTRL &ru_undo        &ctl_cut   &ru_copy &ru_paste &kp MINUS                 &none &none &none &none &none &none
                                                         &mo RSE   &kp LSHFT &mo ADJ   &none &none &none
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |         |  ; :          |  7 ?     |   8    |    9    |   0     |               |     |     |     |     |     |      |     |
//        | SPC     |  .,           |   4      |   5    |    6    |   =+    |               |     |     |     |     |     |      |
//        | LCTL    |  /\           |   1      |  2 "   |    3    |   -_    |               |     |     |     |     |     |      |
//                                                      |  RSE    |LSHFT    | ADJ   | |     |     |     |
                        bindings = <
   &kp ESC &none      &kp SEMI        &eng_qmark &kp N8    &kp N9       &kp N0                    &none &none &none &none &none &none  &none
           &kp SPACE  &eng_all        &eng_save  &kp N5    &eng_find    &kp EQUAL                 &none &none &none &none &none &none
           &kp LCTRL  &eng_undo       &ctl_cut   &eng_copy &eng_paste   &kp MINUS                 &none &none &none &none &none &none
                                                           &mo RSE      &kp LSHFT &mo ADJ   &none &none &none
                         >;
                };

                raise_layer {
                        bindings = <
   &none  &none  &none &none        &st_loopeach &st_elseend  &none                       &none  &none &none &none &none  &none &none
          &none  &none &none        &st_forwhi   &st_ifthen   &none                       &none  &none &none &none &none  &none
          &none  &none &none        &st_getset   &st_addel    &st_procfunc                &none  &none &none &none &none  &none
                                                 &trans       &trans       &trans   &none &none  &none
                        >;
                };
                
                adjust_layer {
// -----------------------------------------------------------------------------------------
// |            | F12            | PrntScr   | ctl {      | ctl home   | ctl }      | ENTER   |               |     |     |     |     |     |      |     |
//              | ALT            | ctl-a     | home       | ctl end    | end        |  TAB    |               |     |     |     |     |     |      |
//              | LCTL           | ctl-z     | ctl-x      | ctl-c      | ctl-v      |  DEL    |               |     |     |     |     |     |      |
//                                                                     | BKSPS      |LSHFT    |       | |     |     |     |
                        bindings = <
   &kp LC(MINUS) &kp F12          &ctl_prnbrk  &kp F3       &kp F4       &kp F5       &kp ENTER                   &none &none &none &none &none &none  &none
                 &kp LALT         &kp HOME     &kp PG_DN    &kp PG_UP    &kp END      &kp TAB                     &none &none &none &none &none &none
                 &kp LCTRL        &kp LC(HOME) &kp LC(LBKT) &kp LC(RBKT) &kp LC(END)  &kp DEL                     &none &none &none &none &none &none
                                                                         &kp BSPC     &trans      &none     &none &none &none
                        >;
                };
        };
};
